/*
 * Copyright (c) 2013-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256.step1;

/**
 * This task is a refinement over the behavioral implementation by using a ROM to
 * lookup the values of K. This is mostly for educational value, because the limiting
 * factor for a high-performance hardware implementation is the big W array:
 * it is 64x32 registers and a lot of muxes. We optimize it in step 2.
 * 
 * @author Matthieu Wipliez
 */
task SHA256_step1 {
	import com.synflow.sha256.SHACommon.*;

	/**
	 * msg is the message received, Kin is contents from the K ROM
	 */
	in sync u32 msg, kIn;
	
	/**
	 * hash is the hash produced, Kaddr the address to send the ROM
	 */
	out sync u256 hash, addr_t kAddr;

	u32 H_i[8];

	u32 a, b, c, d, e, f, g, h;
	u7 t;

	u32 W[64];

	/**
	 * Mostly the same as the behavioral implementation, except that we write
	 * an address to Kaddr a cycle in advance.
	 */
	void loop() {
		for (t = 0; t < 16; t++) {
			u32 m = msg.read;
			W[t] = m;
			print("W[", t, "] = ", m);
		}

		for (; t < 64; t++) {
			W[t] = (u32) (lcSigma1(W[t - 2]) + W[t - 7] + lcSigma0(W[t - 15]) + W[t - 16]);
		}

		H_i[0] = 0x6a09e667;
		H_i[1] = 0xbb67ae85;
		H_i[2] = 0x3c6ef372;
		H_i[3] = 0xa54ff53a;
		H_i[4] = 0x510e527f;
		H_i[5] = 0x9b05688c;
		H_i[6] = 0x1f83d9ab;
		H_i[7] = 0x5be0cd19;
		kAddr.write(0);

		a = H_i[0];
		b = H_i[1];
		c = H_i[2];
		d = H_i[3];
		e = H_i[4];
		f = H_i[5];
		g = H_i[6];
		h = H_i[7];
		kAddr.write(1);

		for (t = 0; t < 64; t++) {
			u32 T1 = (u32) (h + ucSigma1(e) + Ch(e, f, g) + kIn.read + W[t]);
			u32 T2 = (u32) (ucSigma0(a) + Maj(a, b, c));
			h = g;
			g = f;
			f = e;
			e = (u32) (d + T1);
			d = c;
			c = b;
			b = a;
			a = (u32) (T1 + T2);
			kAddr.write((u6) (t + 2));
		}

		H_i[0] += a;
		H_i[1] += b;
		H_i[2] += c;
		H_i[3] += d;
		H_i[4] += e;
		H_i[5] += f;
		H_i[6] += g;
		H_i[7] += h;

		print("H_i[0] = ", H_i[0]);
		print("H_i[1] = ", H_i[1]);
		print("H_i[2] = ", H_i[2]);
		print("H_i[3] = ", H_i[3]);
		print("H_i[4] = ", H_i[4]);
		print("H_i[5] = ", H_i[5]);
		print("H_i[6] = ", H_i[6]);
		print("H_i[7] = ", H_i[7]);

		hash.write(H_i[0] << 224 | H_i[1] << 192 | H_i[2] << 160 | H_i[3] << 128 | H_i[4] << 96 | H_i[5] << 64 | H_i[6] << 32
		| H_i[7]);
	}
}