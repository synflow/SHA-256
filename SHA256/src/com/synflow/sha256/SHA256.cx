/*
 * Copyright (c) 2013-2014, Synflow SAS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of Synflow nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package com.synflow.sha256;

/**
 * This task is a behavioral, unoptimized implementation of SHA-256.
 * 
 * @author Matthieu Wipliez
 */
task SHA256 {
	import com.synflow.sha256.SHACommon.*;

	in sync u32 msg; out sync u256 hash;

	u32 H_i[8];

	u32 a, b, c, d, e, f, g, h;
	u7 t;

	u32 W[64];

	const u32 K[64] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1,
	0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d,
	0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3,
	0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb,
	0xbef9a3f7, 0xc67178f2 };
	
	void loop() {
		for (t = 0; t < 16; t++) {
			u32 m = msg.read;
			W[t] = m;
		}

		for (; t < 64; t++) {
			u32 temp = (u32) (lcSigma1(W[t - 2]) + W[t - 7] + lcSigma0(W[t - 15]) + W[t - 16]);
			W[t] = temp;
			print("W[", t, "] = ", temp);
		}

		H_i[0] = 0x6a09e667;
		H_i[1] = 0xbb67ae85;
		H_i[2] = 0x3c6ef372;
		H_i[3] = 0xa54ff53a;
		H_i[4] = 0x510e527f;
		H_i[5] = 0x9b05688c;
		H_i[6] = 0x1f83d9ab;
		H_i[7] = 0x5be0cd19;

		a = H_i[0];
		b = H_i[1];
		c = H_i[2];
		d = H_i[3];
		e = H_i[4];
		f = H_i[5];
		g = H_i[6];
		h = H_i[7];

		for (t = 0; t < 64; t++) {
			u32 T1 = (u32) (h + ucSigma1(e) + Ch(e, f, g) + K[t] + W[t]);
			u32 T2 = (u32) (ucSigma0(a) + Maj(a, b, c));
			h = g;
			g = f;
			f = e;
			e = (u32) (d + T1);
			d = c;
			c = b;
			b = a;
			a = (u32) (T1 + T2);
		}

		H_i[0] += a;
		H_i[1] += b;
		H_i[2] += c;
		H_i[3] += d;
		H_i[4] += e;
		H_i[5] += f;
		H_i[6] += g;
		H_i[7] += h;

		print("H_i[0] = ", H_i[0]);
		print("H_i[1] = ", H_i[1]);
		print("H_i[2] = ", H_i[2]);
		print("H_i[3] = ", H_i[3]);
		print("H_i[4] = ", H_i[4]);
		print("H_i[5] = ", H_i[5]);
		print("H_i[6] = ", H_i[6]);
		print("H_i[7] = ", H_i[7]);

		hash.write(H_i[0] << 224 | H_i[1] << 192 | H_i[2] << 160 | H_i[3] << 128 | H_i[4] << 96 | H_i[5] << 64 | H_i[6] << 32
		| H_i[7]);

	}
}

/**
 * This network is the testbench for the SHA256 task.
 * 
 * @author Matthieu Wipliez
 * @author Nicolas Siret
 */
network TestSha {
	import com.synflow.sha256.SHA256;

	source = new task {
		out sync u32 stimulus;

		void setup() {
			stimulus.write(0x61626380);
			for (u6 i = 0; i < 14; i++) {
				stimulus.write(0);
			}

			stimulus.write(0x18);
		}
	};

	sha = new SHA256();
	sha.reads(source.stimulus);

	expected = new task {
		void setup() {
			u256 dut_hash = sha.hash.read;
			print("read hash from dut: ", dut_hash);
			assert(dut_hash == 0xBA7816BF_8F01CFEA_414140DE_5DAE2223_B00361A3_96177A9C_B410FF61_F20015AD);
			print("assertion passed");
		}
	};
}
